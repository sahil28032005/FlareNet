// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//models project specific

//users schema
model User {
  id      Int       @id @default(autoincrement())
  email   String    @unique
  name    String?
  role    Role      @default(USER)
  Profile Profile?
  Project Project[]
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}

enum Role {
  USER
  ADMIN
}

//project schema
enum DeploymentStatus {
  PENDING
  ACTIVE
  FAILED
  INACTIVE
}

enum Environment {
  PRODUCTION
  STAGING
  DEVELOPMENT
}
model Project {
  id          String       @id @default(uuid()) @db.Uuid
  name        String
  gitUrl      String
  description String?
  ownerId     Int
  owner       User         @relation(fields: [ownerId], references: [id])
  deployments Deployment[] // a project can have multiple deployments
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([name])
  @@index([gitUrl])
}

model Deployment {
  id          String           @id @default(uuid()) @db.Uuid
  projectId   String           @db.Uuid // Ensure this is of the same type as the Project id
  project     Project          @relation(fields: [projectId], references: [id])
  environment Environment
  status      DeploymentStatus @default(INACTIVE)
  url         String // this will be final hosted URL of the user's project
  logsUrl     String?
  version     String? // Optional version or tag of the deployment
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([environment])
  @@index([status]) // Index for efficient status filtering
}

